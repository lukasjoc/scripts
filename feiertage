#!/usr/bin/env python3

"""
A simple, *self contained* python3 script to list the german "feiertage" in a
more readable format. This uses the feiertage-api API (https://feiertage-api.de/).
"""
import argparse
import json
import os
import sys
from argparse import ArgumentTypeError
from collections import namedtuple
from datetime import datetime
from pathlib import Path

AnsiColor = namedtuple("AnsiColor", ["fg"])
AnsiMode  = namedtuple("AnsiMode", ["set"])

ANSI_COLOR_DEFAULT  = AnsiColor(fg="")
ANSI_WHITE          = AnsiColor(fg="\033[37m")
ANSI_RED            = AnsiColor(fg="\033[31m")
ANSI_GREEN          = AnsiColor(fg="\033[32m")
ANSI_MODE_DEFAULT   = AnsiMode(set="")
ANSI_MODE_DIMM      = AnsiMode(set="\033[2m")
ANSI_MODE_BOLD      = AnsiMode(set="\033[1m")
ANSI_MODE_UNDERLINE = AnsiMode(set="\033[4m")

ANSI_RESET_ALL = "\033[0m"
def termcolor(text: str, color: AnsiColor = ANSI_COLOR_DEFAULT,
              mode: AnsiMode = ANSI_MODE_DEFAULT) -> str:
    return f"{mode.set}{color.fg}{text}{ANSI_RESET_ALL}"

EXIT_OK      = 0
EXIT_ERR     = 1
EXIT_NOPOSIX = 2
EXIT_NONOT   = 3

MARK = termcolor("!", color=ANSI_WHITE, mode=ANSI_MODE_BOLD)
TABLE_HEADER = ["Datum", "Feiertag", "Hinweis"]
TableRow = namedtuple("TableRow", ["date", "name", "notice"])

import http
import http.client
from http.client import HTTPException

class FeiertageApi:
    BASE_URL = "feiertage-api.de"
    conn: http.client.HTTPConnection | None = None
    def get(self, year: int , state: str):
        if not year or not state: return None
        cachepath = Path(os.path.expanduser("~")).joinpath(".cache/feiertage")
        if not cachepath.exists():
            cachepath.mkdir(parents=True, exist_ok=True)
        cachefile = cachepath.joinpath(f"{year}-{state}.json")
        if cachefile.exists():
            print(f"{termcolor('INFO', color=ANSI_GREEN)}: Reading from cache {cachefile}", end="\n\n")
            with cachefile.open("r+") as f:
                return json.load(f)
        print(f"{termcolor('INFO', color=ANSI_GREEN)}: Fetching from feiertage-api.de year={year}, state={state}", end="\n\n")
        self.conn.request("GET", f"/api/?jahr={year}&nur_land={state}", headers={"Content-Type": "application/json"})
        res = self.conn.getresponse()
        if res.status != http.HTTPStatus.OK:
            raise HTTPException(f"something went wrong with fetch the data: HTTP/{req.status_code}")
        data = json.loads(res.read().decode("utf-8").replace("'", '"'))
        with cachefile.open("w+") as f: json.dump(data, f, indent=2)
        return data
    def __enter__(self):
        self.conn = http.client.HTTPConnection(self.BASE_URL) if not self.conn else self.conn
        return self
    def __exit__(self, _, __, ___):
        if not self.conn: return
        self.conn.close()
        self.conn = None

def main(args) -> int:
    if os.name != "posix": return EXIT_NOPOSIX
    with FeiertageApi() as api:
        try:
            data = api.get(year=args.year, state=args.state)
        except HTTPException as e:
            print(f"{termcolor('[ERR]', color=ANSI_RED)}: {e}", end="\n")
            return EXIT_ERR

    # Rendering the table and handling other options
    rows: List[TableRow] = []
    for name, info in data.items():
        date = datetime.strptime(info.get("datum"), "%Y-%m-%d").date()
        rows.append(TableRow(date=date, name=name, notice=info.get("hinweis") or None))

    # Notice display for a single notice id
    if args.notice:
        if args.notice < 0 or args.notice >= len(rows):
            return EXIT_NONOT
        row = rows[args.notice]
        if not row.notice:
            return EXIT_NONOT
        print(row.notice)
        return EXIT_OK

    # Default display of events
    table_rows: List[TableRow] = []
    now = datetime.now().date()
    next_found = False
    max_indent = max(len(row.name) for row in rows)
    for index, row in enumerate(rows):
        mode = ANSI_MODE_DEFAULT
        if row.date < now:
            mode = ANSI_MODE_DIMM
        if row.date >= now and not next_found and row.date.year == now.year:
            next_found = True
            mode = ANSI_MODE_BOLD
        notice_formatted = f"({MARK}|{index})" if row.notice else ""
        date_formatted = termcolor(row.date.strftime("%d.%m.%Y"), color=ANSI_WHITE, mode=mode)
        name_formatted = f"{row.name}{' ' * (max_indent-len(row.name))}"
        print(" ".join([date_formatted, name_formatted, notice_formatted]))
    return EXIT_OK

if __name__ == "__main__":
    SUPPORTED_STATE_CODES = ["NATIONAL", "BW", "BY", "BE", "BB", "HB", "HH", "HE",
                         "MV", "NI", "NW", "RP", "SL", "SN", "ST", "SH", "TH"]
    argparse = argparse.ArgumentParser()
    argparse.add_argument("--state",  type=str, choices=SUPPORTED_STATE_CODES, help="a two-letter code representing a german federal state", default="BY")
    argparse.add_argument("--year",   type=int, help="filter for specific year (might fetch from internet)", default=datetime.now().year)
    argparse.add_argument("--notice", type=int, help="show the notice at an index")
    args = argparse.parse_args()
    code = main(args)
    if code == EXIT_NOPOSIX:
        print(f"{termcolor(f'EXIT_NOPOSIX', color=ANSI_RED)}: Only POSIX is supported. As it should be. ;)\n")
        argparse.print_help()
    elif code == EXIT_NONOT:
        print(f"{termcolor(f'EXIT_NONOT', color=ANSI_RED)}: The notice id you provided doesnt exist or is invalid.\n")
        argparse.print_help()
    sys.exit(code)

