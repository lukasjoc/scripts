#!/usr/bin/env python

import argparse
from dataclasses import dataclass
import datetime
from datetime import datetime as dt
import sys
from typing import Any, Dict, List, Tuple

import docker
from docker.errors import APIError, DockerException
from tabulate import tabulate
import termcolor


@dataclass
class CoolDockerEntity:
    name: str
    cols: List[str]
    data: Dict[str, Tuple[str, ...]]
    count: int


class CoolDockerParser:
    def __init__(self, client):
        self.client: docker.DockerClient = client
        self.ctx: Dict[str, CoolDockerEntity] = {}

    @staticmethod
    def __timedelta(time: str, pattern: str = "%Y-%m-%dT%H:%M:%S") -> str:
        delta = abs(dt.strptime(dt.strftime(dt.today(), pattern), pattern)
            - dt.strptime(time.split(".")[0], pattern))
        delta_secs_total = int(delta.total_seconds()) - (60 * 60)
        delta_time_str: str = str(datetime.timedelta(seconds=delta_secs_total))
        return (f"> {delta.days} days ago" if delta.days >= 1 else f"{delta_time_str} ago")

    @staticmethod
    def fmt(entity: CoolDockerEntity, want: bool = True, color: str|None = None):
        if not want: return None
        count = termcolor.colored(str(entity.count), color=color)
        name  = termcolor.colored(entity.name, color=color)
        head_line = f"[{count}] {name}:"
        rows = entity.data.values()
        body = tabulate(rows, headers=entity.cols, tablefmt="plain")
        return f"{head_line}\n{body}\n"

    def containers(self) -> CoolDockerEntity:
        data: Dict[str, Tuple[str, ...]] = {}
        cols: List[str] = ["CONTAINER ID", "IMAGE", "CREATED", "STATUS", "PORTS",
            "NAMES", "IP ADDRESS"]

        container_list = self.client.containers.list()
        for container in container_list:
            attrs = container.attrs
            if not attrs: continue
            config = attrs["Config"]
            container_name: str = config["Hostname"][:9]
            image: str          = config["Image"]
            names: str          = attrs["Name"][1:]
            created: str        = self.__timedelta(time=attrs["Created"])
            ns: dict = attrs["NetworkSettings"]
            network_ports: Dict[Any, Any] = ns["Ports"].items()
            ports: str = ""
            for port, mapping in network_ports:
                ports += f"{port}"
                if mapping:
                    for item in mapping:
                        host_ip = item["HostIp"]
                        host_port = item["HostPort"]
                        ports += f"  {host_ip}:{host_port}->{port}\n"

            # get the container ip
            ip: str = ns["IPAddress"]
            network_mode = attrs["HostConfig"]["NetworkMode"]
            if network_mode != "default":
                ip = ns["Networks"][network_mode]["IPAddress"]

            # get the current container status
            state = attrs["State"]
            status: str = state["Status"]
            if "Health" in state:
                health_state = state["Health"]["Status"]
                status = f"{status} ({health_state})"

            data[container_name] = (container_name, image, created, status, ports, names,
                                    ip)

        count: int = len(data)
        name: str = "CONTAINER" if count <= 1 else "CONTAINERS"
        self.ctx["containers"] = CoolDockerEntity(name=name, cols=cols, data=data,
                                                  count=count)
        return self.ctx["containers"]

    def images(self, filters: Dict[str, bool]|None = None) -> CoolDockerEntity:
        data: Dict[str, Tuple[str, ...]] = {}
        cols: List[str] = ["ID(sha256)", "REPO", "TAG", "CREATED", "SIZE (MiB)"]

        filters = filters if filters else {"dangling": False}
        filtered_images = self.client.images.list(filters=filters)
        for image in filtered_images:
            attrs = image.attrs
            if not attrs: continue
            image_id_splits: List[str] = attrs["Id"].split(":")
            image_id_sha: str = image_id_splits[1][:9]
            created: str = self.__timedelta(time=attrs["Created"])
            mib_image_size = f"{attrs['Size']/8/1024**2:07.3f} MiB"
            repo_tags: List[str] = attrs["RepoTags"]
            first_tag: List[str] = repo_tags[0].split(":")
            tags_count: int = len(repo_tags)
            repo: str = first_tag[0] if tags_count >= 1 else ""
            tags: str = first_tag[1] if tags_count >= 1 else ""
            data[image_id_sha] = image_id_sha, repo, tags, created, mib_image_size

        count: int = len(data)
        name: str = "IMAGE" if count <= 1 else "IMAGES"
        self.ctx["images"] = CoolDockerEntity(name=name, cols=cols, data=data,
                                              count=count)
        return self.ctx["images"]

    def networks(self, filters: Dict[str, bool]|None = None) -> CoolDockerEntity:
        data: Dict[str, Tuple[str, ...]] = {}
        cols: List[str] = ["NET ID", "NAME", "DRIVER", "CREATED", "SCOPE", "INTERNAL",
            "ATTACHABLE"]

        filters = filters if filters else {"dangling": True}
        filtered_networks = self.client.networks.list(filters=filters)
        for network in filtered_networks:
            attrs = network.attrs
            if not attrs: continue
            network_id: str       = attrs["Id"][:9]
            network_name: str     = attrs["Name"]
            driver: str           = attrs["Driver"]
            created: str          = self.__timedelta(time=attrs["Created"])
            scope: str            = attrs["Scope"]
            is_internal: str      = attrs["Internal"]
            is_attachable: str    = attrs["Attachable"]
            data[network_id] = (network_id, network_name, driver, created, scope,
                                is_internal, is_attachable)
        count: int = len(data)
        name: str = "NETWORK" if count <= 1 else "NETWORKS"
        self.ctx["networks"] = CoolDockerEntity(name=name, cols=cols, data=data,
                                                count=count)
        return self.ctx["networks"]

    def volumes(self) -> CoolDockerEntity:
        data: Dict[str, Tuple[str, ...]] = {}
        cols: List[str] = ["NAME", "DRIVER", "VOLUME", "SCOPE"]

        volumes = self.client.volumes.list()
        for volume in volumes:
            attrs = volume.attrs
            if not attrs: continue
            volume_name: str = attrs["Name"]
            driver: str      = attrs["Driver"]
            scope: str       = attrs["Scope"]
            data[volume_name] = volume_name, driver, scope

        count: int = len(data)
        name: str = "VOLUME" if count <= 1 else "VOLUMES"
        self.ctx["volumes"] = CoolDockerEntity(name=name, cols=cols, data=data,
                                               count=count)
        return self.ctx["volumes"]


def main(args: argparse.Namespace) -> int:
    try:
        docker_client = docker.from_env()
        cooldocker = CoolDockerParser(client=docker_client)
        args.all = not any([args.c, args.i, args.n, args.v])
        show_containers = cooldocker.fmt(want=args.all or args.c, entity=cooldocker.containers(), color="cyan")
        show_imgs       = cooldocker.fmt(want=args.all or args.i, entity=cooldocker.images(),     color="red")
        show_networks   = cooldocker.fmt(want=args.all or args.n, entity=cooldocker.networks(),   color="green")
        show_volumes    = cooldocker.fmt(want=args.all or args.v, entity=cooldocker.volumes(),    color="magenta")
        show = [show_containers, show_imgs, show_networks, show_volumes]
        [print(ent) for ent in show if ent]

    except (APIError, DockerException) as err:
        print(f"ERR: docker engine might not be running \n {err}")
        return 1
    return 0


if __name__ == "__main__":
    # https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse
    def autobool(arg: str):
        if isinstance(arg, bool): return arg
        if arg.lower() in ("yes", "true", "t", "y", "1"): return True
        if arg.lower() in ("no", "false", "f", "n", "0"): return False
        raise argparse.ArgumentTypeError("Boolean value expected.")

    parser = argparse.ArgumentParser()
    parser.add_argument("--all", type=autobool, nargs="?", const=True, default=True,  help="show everything")
    parser.add_argument("-c",    type=autobool, nargs="?", const=True, default=False, help="include containers in the output")
    parser.add_argument("-i",    type=autobool, nargs="?", const=True, default=False, help="include Images in the output")
    parser.add_argument("-n",    type=autobool, nargs="?", const=True, default=False, help="include networks in the output")
    parser.add_argument("-v",    type=autobool, nargs="?", const=True, default=False, help="include volumes in the output")
    args = parser.parse_args()
    sys.exit(main(args=args))

